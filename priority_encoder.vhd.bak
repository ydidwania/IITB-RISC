library std;
use std .standard.all;
library ieee;
use ieee.std_logic_1164.all;

entity priorit_encoder is
	port (
		ir: in std_logic_vector (0 to 7);
		clk, rst: in std_logic;
		Z: out std_logic_vector(0 to 3);
		F1,F0: out std_logic;
	);
end entity;
architecture behave of control_path is

    signal y: std_logic_vector(0 to 7):="11111111";
    signal d,q: std_logic_vector(0 to 7):="00000000";
    
	component mux_state is
		port (
			inp0, inp1: in std_logic_vector(0 to 4);
			s : in std_logic;
			z : out std_logic_vector(0 to 4)
		);
	end component;

begin

    f0<= 
    flip_flop : process( clk )
    begin
        if rising_edge(clk) then
            q<=d;
        end if;
    end process ; -- flip flop

    encoder : process( q )
    begin
        if q(0) = '1' then
            Z<="000";
        elsif q(1)='1' then
            Z<="001";
        elsif q(2)='1' then
            Z<="010";
        elsif q(3)='1' then
            Z<="011";
        elsif q(4)='1' then
            Z<="100";
        elsif q(5)='1' then
            Z<="001";
        elsif q(6)='1' then
            Z<="001";
        elsif q(7)='1' then
            Z<="001";
        elsif q(8)='1' then
            Z<="001";
        else
            Z<="000";         
        end if;

        case(q) is
            when "00000000" => F0<='1'; F1<='0';
            when "10000000"|"01000000"|"00100000"|"00010000"|"00001000"|"00000100"|"00000010"|"00000001"| => F0<='0'; F1<='1';
            when others => F1<='0'; F0<='0';
        end case;

    end process ; -- encoder


end behave